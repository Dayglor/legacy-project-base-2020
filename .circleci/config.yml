# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1
  aws-cli: circleci/aws-cli@1.3
  aws-ecs: circleci/aws-ecs@2.0

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    working_directory: ~/project
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:15.1
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      # - node/install-packages
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: |
            chmod +x deploy-dev.sh
            mkdir -p ~/project/tmp
      # - run:
      #     name: Run tests
      #     command: yarn test
      - persist_to_workspace:
          root: ~/
          paths:
            - "project"

  push-to-ecr:
    working_directory: ~/project
    docker:
      - image: "cimg/python:3.9.1"
    parameters:
      aws-access-key-id:
        type: env_var_name
        default: AWS_ACCESS_KEY
      aws-secret-access-key:
        type: env_var_name
        default: AWS_SECRET_ACCESS_KEY
      aws-region:
        type: env_var_name
        default: AWS_DEFAULT_REGION
    steps:
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          version: 19.03.13
      - aws-cli/setup:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-region: << parameters.aws-region >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
      - run:
          name: Push To ECR
          command: ./deploy-dev.sh
      - aws-ecs/update-service:
          cluster-name: "crm-consultores"
          service-name: "crm-consultores-service-dev"
          container-image-name-updates: "container=crm-consultores-api-dev,tag=dev"
          family: "crm-consultores-task"

  build-and-test-production:
    working_directory: ~/project
    docker:
      - image: cimg/node:15.1
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: |
            chmod +x deploy-production.sh
            mkdir -p ~/project/tmp
      # - run:
      #     name: Run tests
      #     command: yarn test
      - persist_to_workspace:
          root: ~/
          paths:
            - "project"

  push-to-ecr-production:
    working_directory: ~/project
    docker:
      - image: "cimg/python:3.9.1"
    parameters:
      aws-access-key-id:
        type: env_var_name
        default: AWS_ACCESS_KEY
      aws-secret-access-key:
        type: env_var_name
        default: AWS_SECRET_ACCESS_KEY
      aws-region:
        type: env_var_name
        default: AWS_DEFAULT_REGION
    steps:
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          version: 19.03.13
      - aws-cli/setup:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-region: << parameters.aws-region >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
      - run:
          name: Push To ECR
          command: ./deploy-production.sh
      - aws-ecs/update-service:
          cluster-name: "crm-consultores"
          service-name: "crm-consultores-service-production"
          container-image-name-updates: "container=crm-consultores-api-production,tag=production"
          family: "crm-consultores-api-production"

  # update-tag-dev:
  #   docker:
  #     - image: "cimg/python:3.9.1"
  #   steps:
  #     - aws-cli/setup:
  #         aws-access-key-id: ${AWS_ACCESS_KEY}
  #         aws-region: ${AWS_DEFAULT_REGION}
  #         aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
  #     - aws-ecs/update-service:
  #         cluster-name: "crm-consultores"
  #         container-image-name-updates: "container=crm-consultores-api-dev,tag=dev"
  #         family: "crm-consultores-service-dev"

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  dev:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: /dev/
      - push-to-ecr:
          filters:
            branches:
              only: /dev/
          requires:
            - build-and-test
  production:
    jobs:
      - build-and-test-production:
          filters:
            branches:
              only: /main/
      - push-to-ecr-production:
          filters:
            branches:
              only: /main/
          requires:
            - build-and-test-production

      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test
